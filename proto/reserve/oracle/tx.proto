syntax = "proto3";
package reserve.oracle;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "reserve/oracle/params.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/onomyprotocol/reserve/x/oracle/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc RequestBandRates(MsgRequestBandRates) returns (MsgRequestBandRatesResponse);

  rpc UpdateBandParams(MsgUpdateBandParams) returns (MsgUpdateBandParamsResponse);

  rpc UpdateBandOracleRequest(MsgUpdateBandOracleRequest) returns (MsgUpdateBandOracleRequestResponse);

  rpc DeleteBandOracleRequests(MsgDeleteBandOracleRequests) returns (MsgDeleteBandOracleRequestsResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "oracle/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgRequestBandRates defines a SDK message for requesting data from
// BandChain using IBC.
message MsgRequestBandRates {
  option (amino.name) = "oracle/MsgRequestBandRates";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 request_id = 2;
}

// MsgRequestBandRatesResponse defines the Msg/RequestBandRates response type.
message MsgRequestBandRatesResponse {}

// MsgUpdateBandParams define defines a SDK message for update band parameters
message MsgUpdateBandParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "oracle/UpdateBandParams";
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal)           = false;
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string   authority     = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  BandParams band_params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateBandParamsResponse define the Msg/UpdateBandParams response type.
message MsgUpdateBandParamsResponse {}

// MsgUpdateBandOracleRequest define defines a SDK message for update band oracle requests
message MsgUpdateBandOracleRequest{
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "oracle/UpdateBandOracleRequest";
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal)           = false;
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string   authority                      = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  BandOracleRequest update_oracle_request = 2;
}

// MsgUpdateBandOracleRequestResponse define the Msg/MsgUpdateBandOracleRequest response type.
message MsgUpdateBandOracleRequestResponse {}

// MsgDeleteBandOracleRequests define defines a SDK message for delete band oracle requests
message MsgDeleteBandOracleRequests{
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "oracle/UpdateBandOracleRequest";
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal)           = false;
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string   authority                 = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  repeated uint64 delete_request_ids = 2;
}

// MsgDeleteBandOracleRequestsResponse define the Msg/MsgDeleteBandOracleRequests response type.
message MsgDeleteBandOracleRequestsResponse {}

message BandParams {
  // block request interval to send Band IBC prices
  int64 ibc_request_interval = 1;
  // band IBC source channel
  string ibc_source_channel = 2;
  // band IBC version
  string ibc_version = 3;
  // band IBC portID
  string ibc_port_id = 4;
  //  legacy oracle scheme ids
  repeated int64 legacy_oracle_ids = 5;
}

message BandOracleRequest {
  // Unique Identifier for band ibc oracle request
  uint64 request_id = 1;
  // OracleScriptID is the unique identifier of the oracle script to be
  // executed.
  int64 oracle_script_id = 2;
  // Symbols is the list of symbols to prepare in the calldata
  repeated string symbols = 3;
  // AskCount is the number of validators that are requested to respond to this
  // oracle request. Higher value means more security, at a higher gas cost.
  uint64 ask_count = 4;
  // MinCount is the minimum number of validators necessary for the request to
  // proceed to the execution phase. Higher value means more security, at the
  // cost of liveness.
  uint64 min_count = 5;
  // FeeLimit is the maximum tokens that will be paid to all data source
  // providers.
  repeated cosmos.base.v1beta1.Coin fee_limit = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // PrepareGas is amount of gas to pay to prepare raw requests
  uint64 prepare_gas = 7;
  // ExecuteGas is amount of gas to reserve for executing
  uint64 execute_gas = 8;
  // MinSourceCount is the minimum number of data sources that must be used by
  // each validator
  uint64 min_source_count = 9;
}