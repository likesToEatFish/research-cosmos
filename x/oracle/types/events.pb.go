// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reserve/oracle/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventBandAckSuccess struct {
	AckResult string `protobuf:"bytes,1,opt,name=ack_result,json=ackResult,proto3" json:"ack_result,omitempty"`
	ClientId  int64  `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *EventBandAckSuccess) Reset()         { *m = EventBandAckSuccess{} }
func (m *EventBandAckSuccess) String() string { return proto.CompactTextString(m) }
func (*EventBandAckSuccess) ProtoMessage()    {}
func (*EventBandAckSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_5441448c19065114, []int{0}
}
func (m *EventBandAckSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBandAckSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBandAckSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBandAckSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBandAckSuccess.Merge(m, src)
}
func (m *EventBandAckSuccess) XXX_Size() int {
	return m.Size()
}
func (m *EventBandAckSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBandAckSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_EventBandAckSuccess proto.InternalMessageInfo

func (m *EventBandAckSuccess) GetAckResult() string {
	if m != nil {
		return m.AckResult
	}
	return ""
}

func (m *EventBandAckSuccess) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

type EventBandAckError struct {
	AckError string `protobuf:"bytes,1,opt,name=ack_error,json=ackError,proto3" json:"ack_error,omitempty"`
	ClientId int64  `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *EventBandAckError) Reset()         { *m = EventBandAckError{} }
func (m *EventBandAckError) String() string { return proto.CompactTextString(m) }
func (*EventBandAckError) ProtoMessage()    {}
func (*EventBandAckError) Descriptor() ([]byte, []int) {
	return fileDescriptor_5441448c19065114, []int{1}
}
func (m *EventBandAckError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBandAckError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBandAckError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBandAckError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBandAckError.Merge(m, src)
}
func (m *EventBandAckError) XXX_Size() int {
	return m.Size()
}
func (m *EventBandAckError) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBandAckError.DiscardUnknown(m)
}

var xxx_messageInfo_EventBandAckError proto.InternalMessageInfo

func (m *EventBandAckError) GetAckError() string {
	if m != nil {
		return m.AckError
	}
	return ""
}

func (m *EventBandAckError) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

type EventBandResponseTimeout struct {
	ClientId int64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *EventBandResponseTimeout) Reset()         { *m = EventBandResponseTimeout{} }
func (m *EventBandResponseTimeout) String() string { return proto.CompactTextString(m) }
func (*EventBandResponseTimeout) ProtoMessage()    {}
func (*EventBandResponseTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_5441448c19065114, []int{2}
}
func (m *EventBandResponseTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBandResponseTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBandResponseTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBandResponseTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBandResponseTimeout.Merge(m, src)
}
func (m *EventBandResponseTimeout) XXX_Size() int {
	return m.Size()
}
func (m *EventBandResponseTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBandResponseTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_EventBandResponseTimeout proto.InternalMessageInfo

func (m *EventBandResponseTimeout) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

type SetBandPriceEvent struct {
	Relayer     string                        `protobuf:"bytes,1,opt,name=relayer,proto3" json:"relayer,omitempty"`
	Symbols     []string                      `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Prices      []cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,rep,name=prices,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"prices"`
	ResolveTime uint64                        `protobuf:"varint,4,opt,name=resolve_time,json=resolveTime,proto3" json:"resolve_time,omitempty"`
	RequestId   uint64                        `protobuf:"varint,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ClientId    int64                         `protobuf:"varint,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *SetBandPriceEvent) Reset()         { *m = SetBandPriceEvent{} }
func (m *SetBandPriceEvent) String() string { return proto.CompactTextString(m) }
func (*SetBandPriceEvent) ProtoMessage()    {}
func (*SetBandPriceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5441448c19065114, []int{3}
}
func (m *SetBandPriceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBandPriceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBandPriceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBandPriceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBandPriceEvent.Merge(m, src)
}
func (m *SetBandPriceEvent) XXX_Size() int {
	return m.Size()
}
func (m *SetBandPriceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBandPriceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SetBandPriceEvent proto.InternalMessageInfo

func (m *SetBandPriceEvent) GetRelayer() string {
	if m != nil {
		return m.Relayer
	}
	return ""
}

func (m *SetBandPriceEvent) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *SetBandPriceEvent) GetResolveTime() uint64 {
	if m != nil {
		return m.ResolveTime
	}
	return 0
}

func (m *SetBandPriceEvent) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *SetBandPriceEvent) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func init() {
	proto.RegisterType((*EventBandAckSuccess)(nil), "reserve.oracle.EventBandAckSuccess")
	proto.RegisterType((*EventBandAckError)(nil), "reserve.oracle.EventBandAckError")
	proto.RegisterType((*EventBandResponseTimeout)(nil), "reserve.oracle.EventBandResponseTimeout")
	proto.RegisterType((*SetBandPriceEvent)(nil), "reserve.oracle.SetBandPriceEvent")
}

func init() { proto.RegisterFile("reserve/oracle/events.proto", fileDescriptor_5441448c19065114) }

var fileDescriptor_5441448c19065114 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x3f, 0x8f, 0xd3, 0x40,
	0x10, 0xc5, 0xbd, 0x97, 0x23, 0x9c, 0x17, 0x84, 0x74, 0x86, 0xc2, 0x22, 0xc2, 0x67, 0x8e, 0x26,
	0x95, 0x5d, 0x50, 0x50, 0x50, 0x11, 0x71, 0x45, 0x24, 0x90, 0xc0, 0x47, 0x45, 0x13, 0x6d, 0xd6,
	0x23, 0x9f, 0xe5, 0x3f, 0x63, 0x76, 0xd6, 0x11, 0xfe, 0x16, 0x7c, 0xac, 0x2b, 0xaf, 0x44, 0x14,
	0x27, 0x14, 0x7f, 0x11, 0xb4, 0x1b, 0x1b, 0x25, 0x91, 0xae, 0xf3, 0xbc, 0x37, 0xef, 0xa7, 0x7d,
	0xde, 0xe5, 0x33, 0x05, 0x04, 0x6a, 0x03, 0x31, 0x2a, 0x21, 0x4b, 0x88, 0x61, 0x03, 0xb5, 0xa6,
	0xa8, 0x51, 0xa8, 0xd1, 0x7b, 0x36, 0x98, 0xd1, 0xce, 0x7c, 0xf9, 0x22, 0xc3, 0x0c, 0xad, 0x15,
	0x9b, 0xaf, 0xdd, 0xd6, 0xe5, 0x57, 0xfe, 0xfc, 0xca, 0xa4, 0x16, 0xa2, 0x4e, 0x3f, 0xc8, 0xe2,
	0xba, 0x95, 0x12, 0x88, 0xbc, 0x57, 0x9c, 0x0b, 0x59, 0xac, 0x14, 0x50, 0x5b, 0x6a, 0x9f, 0x85,
	0x6c, 0xee, 0x26, 0xae, 0x90, 0x45, 0x62, 0x05, 0x6f, 0xc6, 0x5d, 0x59, 0xe6, 0x50, 0xeb, 0x55,
	0x9e, 0xfa, 0x27, 0x21, 0x9b, 0x4f, 0x92, 0xb3, 0x9d, 0xb0, 0x4c, 0x2f, 0x3f, 0xf3, 0xf3, 0x7d,
	0xe4, 0x95, 0x52, 0xa8, 0x4c, 0xc2, 0x00, 0xc1, 0x0c, 0x03, 0xef, 0x4c, 0xec, 0x99, 0x0f, 0xe3,
	0xde, 0x71, 0xff, 0x3f, 0x2e, 0x01, 0x6a, 0xb0, 0x26, 0xf8, 0x96, 0x57, 0x80, 0xed, 0xd1, 0x39,
	0xd8, 0x51, 0xb0, 0x67, 0xfc, 0xfc, 0x1a, 0x6c, 0xee, 0x8b, 0xca, 0x25, 0x58, 0x8a, 0xe7, 0xf3,
	0xc7, 0x0a, 0x4a, 0xd1, 0xc1, 0x78, 0x8c, 0x71, 0x34, 0x0e, 0x75, 0xd5, 0x1a, 0x4b, 0xf2, 0x4f,
	0xc2, 0x89, 0x71, 0x86, 0xd1, 0x7b, 0xcf, 0xa7, 0x8d, 0x21, 0x90, 0x3f, 0x31, 0xc6, 0xe2, 0xcd,
	0xed, 0xfd, 0x85, 0xf3, 0xe7, 0xfe, 0x62, 0x26, 0x91, 0x2a, 0x24, 0x4a, 0x8b, 0x28, 0xc7, 0xb8,
	0x12, 0xfa, 0x26, 0xfa, 0x04, 0x99, 0x90, 0xdd, 0x47, 0x90, 0xc9, 0x10, 0xf1, 0x5e, 0xf3, 0xa7,
	0x0a, 0x08, 0xcb, 0x0d, 0xac, 0x74, 0x5e, 0x81, 0x7f, 0x1a, 0xb2, 0xf9, 0x69, 0xf2, 0x64, 0xd0,
	0x4c, 0x13, 0xf3, 0xb7, 0x15, 0xfc, 0x68, 0x81, 0x6c, 0x8f, 0x47, 0x76, 0xc1, 0x1d, 0x94, 0x65,
	0x7a, 0xd8, 0x72, 0x7a, 0xd8, 0x72, 0xb1, 0xbc, 0xdd, 0x06, 0xec, 0x6e, 0x1b, 0xb0, 0xbf, 0xdb,
	0x80, 0xfd, 0xea, 0x03, 0xe7, 0xae, 0x0f, 0x9c, 0xdf, 0x7d, 0xe0, 0x7c, 0x8f, 0xb3, 0x5c, 0xdf,
	0xb4, 0xeb, 0x48, 0x62, 0x15, 0x63, 0x8d, 0x55, 0x67, 0x6f, 0x5c, 0x62, 0x19, 0x8f, 0xcf, 0xe6,
	0xe7, 0xf8, 0x70, 0x74, 0xd7, 0x00, 0xad, 0xa7, 0x76, 0xe1, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa5, 0x56, 0xe4, 0xad, 0x57, 0x02, 0x00, 0x00,
}

func (m *EventBandAckSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBandAckSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBandAckSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckResult) > 0 {
		i -= len(m.AckResult)
		copy(dAtA[i:], m.AckResult)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckResult)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBandAckError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBandAckError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBandAckError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckError) > 0 {
		i -= len(m.AckError)
		copy(dAtA[i:], m.AckError)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckError)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBandResponseTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBandResponseTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBandResponseTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetBandPriceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBandPriceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBandPriceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x30
	}
	if m.RequestId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x28
	}
	if m.ResolveTime != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ResolveTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Prices[iNdEx].Size()
				i -= size
				if _, err := m.Prices[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Relayer) > 0 {
		i -= len(m.Relayer)
		copy(dAtA[i:], m.Relayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Relayer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventBandAckSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckResult)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ClientId != 0 {
		n += 1 + sovEvents(uint64(m.ClientId))
	}
	return n
}

func (m *EventBandAckError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckError)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ClientId != 0 {
		n += 1 + sovEvents(uint64(m.ClientId))
	}
	return n
}

func (m *EventBandResponseTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovEvents(uint64(m.ClientId))
	}
	return n
}

func (m *SetBandPriceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Relayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.ResolveTime != 0 {
		n += 1 + sovEvents(uint64(m.ResolveTime))
	}
	if m.RequestId != 0 {
		n += 1 + sovEvents(uint64(m.RequestId))
	}
	if m.ClientId != 0 {
		n += 1 + sovEvents(uint64(m.ClientId))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventBandAckSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBandAckSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBandAckSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBandAckError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBandAckError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBandAckError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBandResponseTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBandResponseTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBandResponseTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBandPriceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBandPriceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBandPriceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Prices = append(m.Prices, v)
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveTime", wireType)
			}
			m.ResolveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolveTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
