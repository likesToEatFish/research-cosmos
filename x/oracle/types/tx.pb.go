// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reserve/oracle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgRequestBandRates defines a SDK message for requesting data from
// BandChain using IBC.
type MsgRequestBandRates struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	RequestId uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *MsgRequestBandRates) Reset()         { *m = MsgRequestBandRates{} }
func (m *MsgRequestBandRates) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBandRates) ProtoMessage()    {}
func (*MsgRequestBandRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{2}
}
func (m *MsgRequestBandRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBandRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBandRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBandRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBandRates.Merge(m, src)
}
func (m *MsgRequestBandRates) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBandRates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBandRates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBandRates proto.InternalMessageInfo

// MsgRequestBandRatesResponse defines the Msg/RequestBandRates response type.
type MsgRequestBandRatesResponse struct {
}

func (m *MsgRequestBandRatesResponse) Reset()         { *m = MsgRequestBandRatesResponse{} }
func (m *MsgRequestBandRatesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBandRatesResponse) ProtoMessage()    {}
func (*MsgRequestBandRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{3}
}
func (m *MsgRequestBandRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBandRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBandRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBandRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBandRatesResponse.Merge(m, src)
}
func (m *MsgRequestBandRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBandRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBandRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBandRatesResponse proto.InternalMessageInfo

// MsgUpdateBandParams define defines a SDK message for update band parameters
type MsgUpdateBandParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority  string     `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	BandParams BandParams `protobuf:"bytes,2,opt,name=band_params,json=bandParams,proto3" json:"band_params"`
}

func (m *MsgUpdateBandParams) Reset()         { *m = MsgUpdateBandParams{} }
func (m *MsgUpdateBandParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBandParams) ProtoMessage()    {}
func (*MsgUpdateBandParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{4}
}
func (m *MsgUpdateBandParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBandParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBandParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBandParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBandParams.Merge(m, src)
}
func (m *MsgUpdateBandParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBandParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBandParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBandParams proto.InternalMessageInfo

// MsgUpdateBandParamsResponse define the Msg/UpdateBandParams response type.
type MsgUpdateBandParamsResponse struct {
}

func (m *MsgUpdateBandParamsResponse) Reset()         { *m = MsgUpdateBandParamsResponse{} }
func (m *MsgUpdateBandParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBandParamsResponse) ProtoMessage()    {}
func (*MsgUpdateBandParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{5}
}
func (m *MsgUpdateBandParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBandParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBandParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBandParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBandParamsResponse.Merge(m, src)
}
func (m *MsgUpdateBandParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBandParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBandParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBandParamsResponse proto.InternalMessageInfo

// MsgUpdateBandOracleRequest define defines a SDK message for update band oracle requests
type MsgUpdateBandOracleRequest struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority           string             `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	UpdateOracleRequest *BandOracleRequest `protobuf:"bytes,2,opt,name=update_oracle_request,json=updateOracleRequest,proto3" json:"update_oracle_request,omitempty"`
}

func (m *MsgUpdateBandOracleRequest) Reset()         { *m = MsgUpdateBandOracleRequest{} }
func (m *MsgUpdateBandOracleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBandOracleRequest) ProtoMessage()    {}
func (*MsgUpdateBandOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{6}
}
func (m *MsgUpdateBandOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBandOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBandOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBandOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBandOracleRequest.Merge(m, src)
}
func (m *MsgUpdateBandOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBandOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBandOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBandOracleRequest proto.InternalMessageInfo

// MsgUpdateBandOracleRequestResponse define the Msg/MsgUpdateBandOracleRequest response type.
type MsgUpdateBandOracleRequestResponse struct {
}

func (m *MsgUpdateBandOracleRequestResponse) Reset()         { *m = MsgUpdateBandOracleRequestResponse{} }
func (m *MsgUpdateBandOracleRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBandOracleRequestResponse) ProtoMessage()    {}
func (*MsgUpdateBandOracleRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{7}
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBandOracleRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBandOracleRequestResponse.Merge(m, src)
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBandOracleRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBandOracleRequestResponse proto.InternalMessageInfo

// MsgDeleteBandOracleRequests define defines a SDK message for delete band oracle requests
type MsgDeleteBandOracleRequests struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority        string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	DeleteRequestIds []uint64 `protobuf:"varint,2,rep,packed,name=delete_request_ids,json=deleteRequestIds,proto3" json:"delete_request_ids,omitempty"`
}

func (m *MsgDeleteBandOracleRequests) Reset()         { *m = MsgDeleteBandOracleRequests{} }
func (m *MsgDeleteBandOracleRequests) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBandOracleRequests) ProtoMessage()    {}
func (*MsgDeleteBandOracleRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{8}
}
func (m *MsgDeleteBandOracleRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBandOracleRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBandOracleRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBandOracleRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBandOracleRequests.Merge(m, src)
}
func (m *MsgDeleteBandOracleRequests) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBandOracleRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBandOracleRequests.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBandOracleRequests proto.InternalMessageInfo

// MsgDeleteBandOracleRequestsResponse define the Msg/MsgDeleteBandOracleRequests response type.
type MsgDeleteBandOracleRequestsResponse struct {
}

func (m *MsgDeleteBandOracleRequestsResponse) Reset()         { *m = MsgDeleteBandOracleRequestsResponse{} }
func (m *MsgDeleteBandOracleRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBandOracleRequestsResponse) ProtoMessage()    {}
func (*MsgDeleteBandOracleRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca24ac8eaee815d, []int{9}
}
func (m *MsgDeleteBandOracleRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBandOracleRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBandOracleRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBandOracleRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBandOracleRequestsResponse.Merge(m, src)
}
func (m *MsgDeleteBandOracleRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBandOracleRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBandOracleRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBandOracleRequestsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "reserve.oracle.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "reserve.oracle.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgRequestBandRates)(nil), "reserve.oracle.MsgRequestBandRates")
	proto.RegisterType((*MsgRequestBandRatesResponse)(nil), "reserve.oracle.MsgRequestBandRatesResponse")
	proto.RegisterType((*MsgUpdateBandParams)(nil), "reserve.oracle.MsgUpdateBandParams")
	proto.RegisterType((*MsgUpdateBandParamsResponse)(nil), "reserve.oracle.MsgUpdateBandParamsResponse")
	proto.RegisterType((*MsgUpdateBandOracleRequest)(nil), "reserve.oracle.MsgUpdateBandOracleRequest")
	proto.RegisterType((*MsgUpdateBandOracleRequestResponse)(nil), "reserve.oracle.MsgUpdateBandOracleRequestResponse")
	proto.RegisterType((*MsgDeleteBandOracleRequests)(nil), "reserve.oracle.MsgDeleteBandOracleRequests")
	proto.RegisterType((*MsgDeleteBandOracleRequestsResponse)(nil), "reserve.oracle.MsgDeleteBandOracleRequestsResponse")
}

func init() { proto.RegisterFile("reserve/oracle/tx.proto", fileDescriptor_2ca24ac8eaee815d) }

var fileDescriptor_2ca24ac8eaee815d = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xb6, 0x69, 0x88, 0x94, 0x2b, 0x82, 0xe2, 0x96, 0x24, 0x75, 0xa9, 0x53, 0x1c, 0x10, 0x21,
	0x40, 0x2c, 0x52, 0x09, 0xa9, 0xd9, 0x1a, 0xb1, 0x74, 0x88, 0x40, 0x46, 0x95, 0x10, 0x8b, 0xe5,
	0xc4, 0x27, 0xd7, 0x52, 0xec, 0x0b, 0x3e, 0xa7, 0x6a, 0x24, 0x86, 0x8a, 0x09, 0x31, 0xf1, 0x13,
	0x3a, 0x22, 0x31, 0x90, 0x81, 0x99, 0x89, 0xa1, 0x63, 0xc5, 0xc4, 0x84, 0x50, 0x22, 0x11, 0x7e,
	0x06, 0xb2, 0xef, 0x6c, 0xe3, 0x8b, 0x5d, 0x4a, 0xbb, 0xb4, 0xb9, 0xf7, 0xbe, 0xf7, 0xde, 0xf7,
	0x7d, 0x77, 0xe7, 0x03, 0x25, 0x17, 0x62, 0xe8, 0xee, 0x43, 0x05, 0xb9, 0x7a, 0xaf, 0x0f, 0x15,
	0xef, 0xa0, 0x31, 0x70, 0x91, 0x87, 0x84, 0xab, 0x34, 0xd1, 0x20, 0x09, 0xf1, 0xba, 0x6e, 0x5b,
	0x0e, 0x52, 0x82, 0xbf, 0x04, 0x22, 0x96, 0x7a, 0x08, 0xdb, 0x08, 0x2b, 0x36, 0x36, 0x95, 0xfd,
	0x47, 0xfe, 0x3f, 0x9a, 0x58, 0x25, 0x09, 0x2d, 0x58, 0x29, 0x64, 0x41, 0x53, 0x2b, 0x26, 0x32,
	0x11, 0x89, 0xfb, 0xbf, 0x68, 0x74, 0x8d, 0x61, 0x31, 0xd0, 0x5d, 0xdd, 0x0e, 0x4b, 0x6e, 0x32,
	0x49, 0x13, 0x3a, 0x10, 0x5b, 0x34, 0x2b, 0x7f, 0xe2, 0xc1, 0xb5, 0x0e, 0x36, 0x77, 0x07, 0x86,
	0xee, 0xc1, 0x67, 0x41, 0x9d, 0xf0, 0x18, 0x14, 0xf4, 0xa1, 0xb7, 0x87, 0x5c, 0xcb, 0x1b, 0x95,
	0xf9, 0x0d, 0xbe, 0x56, 0x68, 0x97, 0xbf, 0x7d, 0x7e, 0xb8, 0x42, 0x99, 0x6c, 0x1b, 0x86, 0x0b,
	0x31, 0x7e, 0xee, 0xb9, 0x96, 0x63, 0xaa, 0x31, 0x54, 0xd8, 0x02, 0x79, 0x32, 0xb9, 0x7c, 0x69,
	0x83, 0xaf, 0x2d, 0x36, 0x8b, 0x8d, 0xa4, 0x09, 0x0d, 0xd2, 0xbf, 0x5d, 0x38, 0xfe, 0x51, 0xe1,
	0x3e, 0xcc, 0xc6, 0x75, 0x5e, 0xa5, 0x05, 0xad, 0x7b, 0x6f, 0x66, 0xe3, 0x7a, 0xdc, 0xea, 0xdd,
	0x6c, 0x5c, 0x2f, 0x52, 0xbe, 0x0c, 0x3b, 0x79, 0x15, 0x94, 0x98, 0x90, 0x0a, 0xf1, 0x00, 0x39,
	0x18, 0xca, 0x87, 0x3c, 0x58, 0xee, 0x60, 0x53, 0x85, 0xaf, 0x86, 0x10, 0x7b, 0x6d, 0xdd, 0x31,
	0x54, 0xdd, 0x83, 0x58, 0x28, 0x82, 0x3c, 0x86, 0x8e, 0x01, 0x5d, 0xa2, 0x46, 0xa5, 0x2b, 0x61,
	0x1d, 0x00, 0x97, 0x60, 0x35, 0xcb, 0x08, 0x48, 0xe7, 0xd4, 0x02, 0x8d, 0xec, 0x18, 0xad, 0xe6,
	0xdb, 0xa3, 0x0a, 0xf7, 0xfb, 0xa8, 0xc2, 0xf9, 0xe4, 0x68, 0x8d, 0xcf, 0x4c, 0x8c, 0x99, 0xb1,
	0xa3, 0xe4, 0x75, 0xb0, 0x96, 0x12, 0x8e, 0x18, 0x7e, 0x25, 0x0c, 0x09, 0x7b, 0x3f, 0x7d, 0x41,
	0xcb, 0xb7, 0xc1, 0x62, 0x57, 0x77, 0x0c, 0x2d, 0xe1, 0xbb, 0xc8, 0xfa, 0x1e, 0x0f, 0x6a, 0xe7,
	0x7c, 0xef, 0x55, 0xd0, 0x8d, 0x22, 0x49, 0x95, 0xc9, 0x2d, 0x28, 0x51, 0xa1, 0x2c, 0x5d, 0xaa,
	0x92, 0x0d, 0x47, 0x2a, 0x7f, 0xf1, 0x40, 0x4c, 0xe4, 0x9f, 0x06, 0x7d, 0xa8, 0x2b, 0xe7, 0x16,
	0xbb, 0x0b, 0x6e, 0x0c, 0x83, 0x96, 0x1a, 0xe1, 0xa5, 0xd1, 0xad, 0xa2, 0xb2, 0x6f, 0xa5, 0xc9,
	0x4e, 0x4c, 0x56, 0x97, 0x49, 0x7d, 0x22, 0xd8, 0xda, 0xca, 0x36, 0x40, 0x9a, 0x33, 0x20, 0x51,
	0x2a, 0xdf, 0x06, 0x72, 0xb6, 0xce, 0xc8, 0x8e, 0x2f, 0x7c, 0x60, 0xd7, 0x13, 0xd8, 0x87, 0x29,
	0xb0, 0xf3, 0x6f, 0xfe, 0x03, 0x20, 0x18, 0x41, 0x4f, 0x2d, 0x3e, 0xc5, 0xfe, 0x19, 0x58, 0xa8,
	0xe5, 0xd4, 0x25, 0x92, 0x51, 0xc3, 0xc3, 0x8c, 0x2f, 0x22, 0xf3, 0x0e, 0xa8, 0x9e, 0xc2, 0x3f,
	0xd4, 0xd9, 0xfc, 0x98, 0x03, 0x0b, 0x1d, 0x6c, 0x0a, 0x2f, 0xc0, 0x95, 0xc4, 0xf7, 0xa4, 0xc2,
	0x6e, 0x0c, 0x73, 0x7f, 0xc5, 0xbb, 0xff, 0x00, 0x84, 0x13, 0x04, 0x03, 0x2c, 0xcd, 0x5d, 0xee,
	0x6a, 0x4a, 0x31, 0x0b, 0x12, 0xef, 0x9f, 0x01, 0xf4, 0xf7, 0x94, 0xb9, 0x0b, 0x5a, 0xcd, 0xa4,
	0x18, 0x83, 0x52, 0xa7, 0x64, 0x5d, 0x12, 0x61, 0x04, 0x4a, 0x59, 0x17, 0xa4, 0x7e, 0x6a, 0x9f,
	0x04, 0x56, 0x6c, 0x9e, 0x1d, 0x1b, 0x8d, 0x7e, 0x0d, 0xca, 0x99, 0x87, 0x31, 0x4d, 0x43, 0x16,
	0x58, 0xdc, 0xfc, 0x0f, 0x70, 0x38, 0x5d, 0xbc, 0x7c, 0xe8, 0x7f, 0xfa, 0xdb, 0x3b, 0xc7, 0x13,
	0x89, 0x3f, 0x99, 0x48, 0xfc, 0xcf, 0x89, 0xc4, 0xbf, 0x9f, 0x4a, 0xdc, 0xc9, 0x54, 0xe2, 0xbe,
	0x4f, 0x25, 0xee, 0xa5, 0x62, 0x5a, 0xde, 0xde, 0xb0, 0xdb, 0xe8, 0x21, 0x5b, 0x41, 0x0e, 0xb2,
	0x47, 0xc1, 0x53, 0xd5, 0x43, 0x7d, 0x25, 0x7c, 0xca, 0x0e, 0xa2, 0xf7, 0x76, 0x34, 0x80, 0xb8,
	0x9b, 0x0f, 0x00, 0x9b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x64, 0x44, 0x8d, 0xd7, 0x8e, 0x07,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RequestBandRates(ctx context.Context, in *MsgRequestBandRates, opts ...grpc.CallOption) (*MsgRequestBandRatesResponse, error)
	UpdateBandParams(ctx context.Context, in *MsgUpdateBandParams, opts ...grpc.CallOption) (*MsgUpdateBandParamsResponse, error)
	UpdateBandOracleRequest(ctx context.Context, in *MsgUpdateBandOracleRequest, opts ...grpc.CallOption) (*MsgUpdateBandOracleRequestResponse, error)
	DeleteBandOracleRequests(ctx context.Context, in *MsgDeleteBandOracleRequests, opts ...grpc.CallOption) (*MsgDeleteBandOracleRequestsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/reserve.oracle.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBandRates(ctx context.Context, in *MsgRequestBandRates, opts ...grpc.CallOption) (*MsgRequestBandRatesResponse, error) {
	out := new(MsgRequestBandRatesResponse)
	err := c.cc.Invoke(ctx, "/reserve.oracle.Msg/RequestBandRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBandParams(ctx context.Context, in *MsgUpdateBandParams, opts ...grpc.CallOption) (*MsgUpdateBandParamsResponse, error) {
	out := new(MsgUpdateBandParamsResponse)
	err := c.cc.Invoke(ctx, "/reserve.oracle.Msg/UpdateBandParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBandOracleRequest(ctx context.Context, in *MsgUpdateBandOracleRequest, opts ...grpc.CallOption) (*MsgUpdateBandOracleRequestResponse, error) {
	out := new(MsgUpdateBandOracleRequestResponse)
	err := c.cc.Invoke(ctx, "/reserve.oracle.Msg/UpdateBandOracleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBandOracleRequests(ctx context.Context, in *MsgDeleteBandOracleRequests, opts ...grpc.CallOption) (*MsgDeleteBandOracleRequestsResponse, error) {
	out := new(MsgDeleteBandOracleRequestsResponse)
	err := c.cc.Invoke(ctx, "/reserve.oracle.Msg/DeleteBandOracleRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	RequestBandRates(context.Context, *MsgRequestBandRates) (*MsgRequestBandRatesResponse, error)
	UpdateBandParams(context.Context, *MsgUpdateBandParams) (*MsgUpdateBandParamsResponse, error)
	UpdateBandOracleRequest(context.Context, *MsgUpdateBandOracleRequest) (*MsgUpdateBandOracleRequestResponse, error)
	DeleteBandOracleRequests(context.Context, *MsgDeleteBandOracleRequests) (*MsgDeleteBandOracleRequestsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) RequestBandRates(ctx context.Context, req *MsgRequestBandRates) (*MsgRequestBandRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBandRates not implemented")
}
func (*UnimplementedMsgServer) UpdateBandParams(ctx context.Context, req *MsgUpdateBandParams) (*MsgUpdateBandParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBandParams not implemented")
}
func (*UnimplementedMsgServer) UpdateBandOracleRequest(ctx context.Context, req *MsgUpdateBandOracleRequest) (*MsgUpdateBandOracleRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBandOracleRequest not implemented")
}
func (*UnimplementedMsgServer) DeleteBandOracleRequests(ctx context.Context, req *MsgDeleteBandOracleRequests) (*MsgDeleteBandOracleRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBandOracleRequests not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reserve.oracle.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBandRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBandRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBandRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reserve.oracle.Msg/RequestBandRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBandRates(ctx, req.(*MsgRequestBandRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBandParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBandParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reserve.oracle.Msg/UpdateBandParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBandParams(ctx, req.(*MsgUpdateBandParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBandOracleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBandOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBandOracleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reserve.oracle.Msg/UpdateBandOracleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBandOracleRequest(ctx, req.(*MsgUpdateBandOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBandOracleRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteBandOracleRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBandOracleRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reserve.oracle.Msg/DeleteBandOracleRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBandOracleRequests(ctx, req.(*MsgDeleteBandOracleRequests))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reserve.oracle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RequestBandRates",
			Handler:    _Msg_RequestBandRates_Handler,
		},
		{
			MethodName: "UpdateBandParams",
			Handler:    _Msg_UpdateBandParams_Handler,
		},
		{
			MethodName: "UpdateBandOracleRequest",
			Handler:    _Msg_UpdateBandOracleRequest_Handler,
		},
		{
			MethodName: "DeleteBandOracleRequests",
			Handler:    _Msg_DeleteBandOracleRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reserve/oracle/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestBandRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBandRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBandRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBandRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBandRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBandRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBandParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBandParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBandParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BandParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBandParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBandParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBandParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBandOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBandOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBandOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateOracleRequest != nil {
		{
			size, err := m.UpdateOracleRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBandOracleRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBandOracleRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBandOracleRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBandOracleRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBandOracleRequests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBandOracleRequests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeleteRequestIds) > 0 {
		dAtA5 := make([]byte, len(m.DeleteRequestIds)*10)
		var j4 int
		for _, num := range m.DeleteRequestIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTx(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBandOracleRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBandOracleRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBandOracleRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestBandRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	return n
}

func (m *MsgRequestBandRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBandParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.BandParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateBandParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBandOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UpdateOracleRequest != nil {
		l = m.UpdateOracleRequest.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateBandOracleRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteBandOracleRequests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DeleteRequestIds) > 0 {
		l = 0
		for _, e := range m.DeleteRequestIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgDeleteBandOracleRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBandRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBandRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBandRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBandRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBandRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBandRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBandParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBandParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBandParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BandParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBandParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBandParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBandParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBandOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBandOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBandOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateOracleRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateOracleRequest == nil {
				m.UpdateOracleRequest = &BandOracleRequest{}
			}
			if err := m.UpdateOracleRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBandOracleRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBandOracleRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBandOracleRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBandOracleRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBandOracleRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBandOracleRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeleteRequestIds = append(m.DeleteRequestIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeleteRequestIds) == 0 {
					m.DeleteRequestIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeleteRequestIds = append(m.DeleteRequestIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRequestIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBandOracleRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBandOracleRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBandOracleRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
